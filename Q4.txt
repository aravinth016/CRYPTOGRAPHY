#include <stdio.h>
#include <string.h>
#include <ctype.h>

// Function prototypes
void encryptText(const char plaintext[], const char key[], char ciphertext[]);
void decryptText(const char ciphertext[], const char key[], char decrypted[]);
int mod(int a, int b);

int main() {
    char plaintext[100], key[100], ciphertext[100], decrypted[100];

    // Input plaintext and key
    printf("Enter the plaintext: ");
    scanf("%s", plaintext);
    printf("Enter the key: ");
    scanf("%s", key);

    // Encrypt the plaintext
    encryptText(plaintext, key, ciphertext);
    printf("Ciphertext: %s\n", ciphertext);

    // Decrypt the ciphertext
    decryptText(ciphertext, key, decrypted);
    printf("Decrypted Text: %s\n", decrypted);

    return 0;
}

// Function to encrypt the plaintext using the key
void encryptText(const char plaintext[], const char key[], char ciphertext[]) {
    int i, j = 0, keyLen = strlen(key);

    for (i = 0; plaintext[i] != '\0'; i++) {
        char p = toupper(plaintext[i]);
        if (isalpha(p)) {
            char k = toupper(key[j % keyLen]);
            ciphertext[i] = ((p - 'A') + (k - 'A')) % 26 + 'A'; // Encryption formula
            j++; // Advance key index
        } else {
            ciphertext[i] = plaintext[i]; // Preserve non-alphabetic characters
        }
    }
    ciphertext[i] = '\0';
}

// Function to decrypt the ciphertext using the key
void decryptText(const char ciphertext[], const char key[], char decrypted[]) {
    int i, j = 0, keyLen = strlen(key);

    for (i = 0; ciphertext[i] != '\0'; i++) {
        char c = toupper(ciphertext[i]);
        if (isalpha(c)) {
            char k = toupper(key[j % keyLen]);
            decrypted[i] = mod((c - 'A') - (k - 'A'), 26) + 'A'; // Decryption formula
            j++; // Advance key index
        } else {
            decrypted[i] = ciphertext[i]; // Preserve non-alphabetic characters
        }
    }
    decrypted[i] = '\0';
}

// Function to handle modular arithmetic for decryption
int mod(int a, int b) {
    return (a % b + b) % b;
}
