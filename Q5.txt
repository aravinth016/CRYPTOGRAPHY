#include <stdio.h>
#include <string.h>
#include <ctype.h>

// Function prototypes
int gcd(int a, int b);
int modInverse(int a, int m);
void affineEncrypt(const char plaintext[], char ciphertext[], int a, int b);
void affineDecrypt(const char ciphertext[], char decrypted[], int a, int b);

int main() {
    char plaintext[100], ciphertext[100], decrypted[100];
    int a, b;

    // Input values for a and b
    printf("Enter the value of 'a': ");
    scanf("%d", &a);
    printf("Enter the value of 'b': ");
    scanf("%d", &b);

    // Validate the value of 'a'
    if (gcd(a, 26) != 1) {
        printf("Invalid value of 'a'. It must be coprime with 26.\n");
        return 1;
    }

    // Input the plaintext
    printf("Enter the plaintext: ");
    scanf("%s", plaintext);

    // Encrypt the plaintext
    affineEncrypt(plaintext, ciphertext, a, b);
    printf("Ciphertext: %s\n", ciphertext);

    // Decrypt the ciphertext
    affineDecrypt(ciphertext, decrypted, a, b);
    printf("Decrypted Text: %s\n", decrypted);

    return 0;
}

// Function to calculate GCD
int gcd(int a, int b) {
    while (b != 0) {
        int temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}

// Function to calculate modular multiplicative inverse
int modInverse(int a, int m) {
    for (int x = 1; x < m; x++) {
        if ((a * x) % m == 1)
            return x;
    }
    return -1; // No inverse exists
}

// Function to encrypt using the affine cipher
void affineEncrypt(const char plaintext[], char ciphertext[], int a, int b) {
    int i;
    for (i = 0; plaintext[i] != '\0'; i++) {
        char p = toupper(plaintext[i]);
        if (isalpha(p)) {
            ciphertext[i] = ((a * (p - 'A') + b) % 26) + 'A';
        } else {
            ciphertext[i] = plaintext[i]; // Preserve non-alphabetic characters
        }
    }
    ciphertext[i] = '\0';
}

// Function to decrypt using the affine cipher
void affineDecrypt(const char ciphertext[], char decrypted[], int a, int b) {
    int i, aInverse = modInverse(a, 26);
    if (aInverse == -1) {
        printf("Decryption not possible. Modular inverse of 'a' does not exist.\n");
        return;
    }

    for (i = 0; ciphertext[i] != '\0'; i++) {
        char c = toupper(ciphertext[i]);
        if (isalpha(c)) {
            decrypted[i] = (aInverse * ((c - 'A' - b + 26) % 26)) % 26 + 'A';
        } else {
            decrypted[i] = ciphertext[i]; // Preserve non-alphabetic characters
        }
    }
    decrypted[i] = '\0';
}
