#include <stdio.h>
#include <stdint.h>

#define KEY_SIZE 56
#define HALF_KEY_SIZE (KEY_SIZE / 2)
#define SUBKEY_SIZE 48

// Permutation table (for illustration purposes, just a simple example of initial key permutation)
int initial_permutation_table[KEY_SIZE] = {
    57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18, 10, 2,
    59, 51, 43, 35, 27, 19, 11, 3, 60, 52, 44, 36, 28, 20, 12, 4,
    61, 53, 45, 37, 29, 21, 13, 5, 62, 54, 46, 38, 30, 22, 14, 6,
    63, 55, 47, 39, 31, 23, 15, 7
};

// Simplified key rotation function (for demonstration purposes)
void rotate_left(uint32_t *half_key, int num_bits) {
    *half_key = ((*half_key) << num_bits) | (*half_key >> (HALF_KEY_SIZE - num_bits));
    *half_key &= (1 << HALF_KEY_SIZE) - 1;  // Mask to retain only 28 bits
}

// Function to generate the subkeys based on the key schedule
void generate_subkeys(uint64_t key, uint64_t subkeys[16]) {
    uint32_t left, right;
    int i, round;

    // Step 1: Initial permutation of the key
    uint64_t permuted_key = 0;
    for (i = 0; i < KEY_SIZE; i++) {
        int bit = (key >> (KEY_SIZE - initial_permutation_table[i])) & 1;
        permuted_key |= (bit << (KEY_SIZE - i - 1));
    }

    // Step 2: Split the permuted key into two 28-bit halves
    left = (permuted_key >> HALF_KEY_SIZE) & ((1 << HALF_KEY_SIZE) - 1);
    right = permuted_key & ((1 << HALF_KEY_SIZE) - 1);

    // Step 3: Generate 16 subkeys
    for (round = 0; round < 16; round++) {
        // Rotate the halves of the key (simplified rotation)
        rotate_left(&left, 1);
        rotate_left(&right, 1);

        // Combine the two halves back into a 56-bit key (with an adjusted combination process)
        uint64_t combined_key = ((uint64_t) left << HALF_KEY_SIZE) | right;

        // For the current round, use a subset of the combined key
        uint64_t subkey = 0;
        for (i = 0; i < SUBKEY_SIZE; i++) {
            int bit = (combined_key >> (KEY_SIZE - i - 1)) & 1;
            subkey |= (bit << (SUBKEY_SIZE - i - 1));
        }

        // Store the generated subkey
        subkeys[round] = subkey;

        // Print the generated subkey (for verification)
        printf("Subkey %d: %lx\n", round + 1, subkey);
    }
}

int main() {
    uint64_t key = 0x133457799bbcdff1; // Example 56-bit key
    uint64_t subkeys[16]; // Array to store 16 subkeys

    // Generate subkeys
    generate_subkeys(key, subkeys);

    return 0;
}
